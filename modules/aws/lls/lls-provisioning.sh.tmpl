#!/bin/bash

# Copyright Teradici Corporation 2020-2021;  Â© Copyright 2022-2024 HP Development Company, L.P.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

##### Template Variables #####
AWS_REGION=${aws_region}
AWS_SSM_ENABLE=${aws_ssm_enable}
BUCKET_NAME=${bucket_name}
CLOUDWATCH_ENABLE=${cloudwatch_enable}
CLOUDWATCH_SETUP_SCRIPT=${cloudwatch_setup_script}
LLS_ACTIVATION_CODE_ID=${lls_activation_code_id}
LLS_ADMIN_PASSWORD_ID=${lls_admin_password_id}
LLS_LICENSE_COUNT=${lls_license_count}
TERADICI_DOWNLOAD_TOKEN=${teradici_download_token}

exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

LLS_ADMIN_PASSWORD=$(aws secretsmanager get-secret-value --secret-id "$LLS_ADMIN_PASSWORD_ID" --query SecretString --output text)
LLS_ACTIVATION_CODE=$(aws secretsmanager get-secret-value --secret-id "$LLS_ACTIVATION_CODE_ID" --query SecretString --output text)

LOG_FILE="/var/log/teradici/provisioning.log"

LLS_REPO_SETUP_SCRIPT_URL="https://dl.anyware.hp.com/$TERADICI_DOWNLOAD_TOKEN/pcoip-license-server/cfg/setup/bash.rpm.sh"

log() {
    local message="$1"
    echo "[$(date)] $message"
}

retry() {
    local retry="$1"         # number of retries
    local retry_delay="$2"   # delay between each retry, in seconds
    local shell_command="$3" # the shell command to run
    local err_message="$4"   # the message to show when the shell command was not successful

    local retry_num=0
    until eval $shell_command
    do
        local rc=$?
        local retry_remain=$((retry-retry_num))

        if [ $retry_remain -eq 0 ]
        then
            log $error_message
            return $rc
        fi

        log "$err_message Retrying in $retry_delay seconds... ($retry_remain retries remaining...)"

        retry_num=$((retry_num+1))
        sleep $retry_delay
    done
}

setup_cloudwatch(){
    if [[ ! -f "/var/log/amazon/amazon-cloudwatch-agent/amazon-cloudwatch-agent.log" ]]
    then
        log "--> Setting up AWS CloudWatch Logs..."

        retry 3 `# 3 retries` \
              5 `# 5s interval` \
              "aws s3 cp s3://$BUCKET_NAME/$CLOUDWATCH_SETUP_SCRIPT ." \
              "--> ERROR: Failed to download CloudWatch setup script from s3://$BUCKET_NAME/$CLOUDWATCH_SETUP_SCRIPT."
        chmod +x $CLOUDWATCH_SETUP_SCRIPT
        dos2unix $CLOUDWATCH_SETUP_SCRIPT

        . $CLOUDWATCH_SETUP_SCRIPT $AWS_REGION \
            $LOG_FILE                           "[%a %b %d %H:%M:%S %Z %Y]" \
            "/var/log/cloud-init-output.log"    "at %a, %d %b %Y %H:%M:%S %z." \
            "/var/log/messages"                 "%b %d %H:%M:%S" \
            "/var/log/teradici/user-data.log"   "%a %b %d %H:%M:%S %Z %Y"
    fi
}

check_required_vars() {
    set +x
    if [[ -z "$LLS_ADMIN_PASSWORD" ]]; then
        log "--> ERROR: Missing LLS Administrator Password."
        missing_vars="true"
    fi

    if [[ -z "$LLS_ACTIVATION_CODE" ]]; then
        log "--> ERROR: Missing LLS Activation Code."
        missing_vars="true"
    fi
    set -x

    if [[ "$missing_vars" == "true" ]]; then
        log "--> Exiting..."
        exit 1
    fi
}

setup_ssm() {
    yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
    systemctl enable amazon-ssm-agent
    systemctl start amazon-ssm-agent
}

if [[ ! -f "$LOG_FILE" ]]
then
    mkdir -p "$(dirname $LOG_FILE)"
    touch "$LOG_FILE"
    chmod 600 "$LOG_FILE"
fi

yum info pcoip-license-server
if [[ $? -eq 0 ]]
then
    log "PCoIP licence Server already installed. Skipping startup script."
    exit 0
fi

# Print all executed commands to the terminal
set -x

# Redirect stdout and stderr to the log file
exec &>>$LOG_FILE

log "$(date) Running $0 as $(whoami)..."

yum update -y

if [[ "$CLOUDWATCH_ENABLE" == "true" ]]
then
    setup_cloudwatch
fi

if [[ "$AWS_SSM_ENABLE" == "true" ]]
then
    setup_ssm
fi

check_required_vars

curl -1sLf $LLS_REPO_SETUP_SCRIPT_URL | distro=el codename=8 bash

retry 5 `# 10 retries` \
      10 `# 10s interval` \
      "dnf install -y java-11-openjdk tzdata-java pcoip-license-server" \
      "--> ERROR: Failed to install pcoip-license-server."

set +x
# PCoIP License Server takes approximately 30-60s to start. Need to wait for PCoIP License Server to
# start before running any LLS commands.
retry 10 `# 10 retries` \
      10 `# 10s interval` \
      "systemctl is-active flexnetls-TERADICI.service" \
      "--> ERROR: Flexnetls service is not active."

retry 10 `# 10 retries` \
      10 `# 10s interval` \
      "pcoip-set-password -p 1P@ssw0rd! -n $LLS_ADMIN_PASSWORD" \
      "--> ERROR: Failed to set new password."

pcoip-activate-online-license -a "$LLS_ACTIVATION_CODE" -c $LLS_LICENSE_COUNT -p "$LLS_ADMIN_PASSWORD"
set -x
