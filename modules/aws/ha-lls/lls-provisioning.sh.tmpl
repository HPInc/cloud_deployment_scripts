#!/bin/bash

# Copyright Teradici Corporation 2020-2021;  Â© Copyright 2022-2024 HP Development Company, L.P.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

##### Template Variables #####
AWS_REGION=${aws_region}
AWS_SSM_ENABLE=${aws_ssm_enable}
BUCKET_NAME=${bucket_name}
CLOUDWATCH_ENABLE=${cloudwatch_enable}
CLOUDWATCH_SETUP_SCRIPT=${cloudwatch_setup_script}
HAPROXY_BACKUP_IP=${haproxy_backup_ip}
HAPROXY_MASTER_IP=${haproxy_master_ip}
LLS_ACTIVATION_CODE_ID=${lls_activation_code_id}
LLS_ADMIN_PASSWORD_ID=${lls_admin_password_id}
LLS_BACKUP_IP=${lls_backup_ip}
LLS_LICENSE_COUNT=${lls_license_count}
LLS_MAIN_IP=${lls_main_ip}
TERADICI_DOWNLOAD_TOKEN=${teradici_download_token}

FLEXNETLSADMIN="/opt/flexnetls/TERADICI/admintools/flexnetlsadmin.sh"
INSTALL_DIR="/root"
LLS_CONFIG_FILE="/opt/flexnetls/TERADICI/local-configuration.yaml"
LLS_REPO_SETUP_SCRIPT_URL="https://dl.anyware.hp.com/$TERADICI_DOWNLOAD_TOKEN/pcoip-license-server/cfg/setup/bash.rpm.sh"
LOG_FILE="/var/log/teradici/provisioning.log"
NCAT_PORT=7072

LLS_ADMIN_PASSWORD=$(aws secretsmanager get-secret-value --secret-id "$LLS_ADMIN_PASSWORD_ID" --query SecretString --output text)
LLS_ACTIVATION_CODE=$(aws secretsmanager get-secret-value --secret-id "$LLS_ACTIVATION_CODE_ID" --query SecretString --output text)

log() {
    echo "[$(date)] $1"
}

retry() {
    local retry="$1"         # number of retries
    local retry_delay="$2"   # delay between each retry, in seconds
    local shell_command="$3" # the shell command to run
    local err_message="$4"   # the message to show when the shell command was not successful

    local retry_num=0
    until eval $shell_command
    do
        local rc=$?
        local retry_remain=$((retry-retry_num))

        if [ $retry_remain -eq 0 ]
        then
            log $error_message
            return $rc
        fi

        log "$err_message Retrying in $retry_delay seconds... ($retry_remain retries remaining...)"

        retry_num=$((retry_num+1))
        sleep $retry_delay
    done
}

setup_cloudwatch(){
    if [[ ! -f "/var/log/amazon/amazon-cloudwatch-agent/amazon-cloudwatch-agent.log" ]]
    then
        log "--> Setting up AWS CloudWatch Logs..."

        retry 3 `# 3 retries` \
              5 `# 5s interval` \
              "aws s3 cp s3://$BUCKET_NAME/$CLOUDWATCH_SETUP_SCRIPT ." \
              "--> ERROR: Failed to download CloudWatch setup script from s3://$BUCKET_NAME/$CLOUDWATCH_SETUP_SCRIPT."
        chmod +x $CLOUDWATCH_SETUP_SCRIPT
        dos2unix $CLOUDWATCH_SETUP_SCRIPT

        . $CLOUDWATCH_SETUP_SCRIPT $AWS_REGION \
            $LOG_FILE                           "[%a %b %d %H:%M:%S %Z %Y]" \
            "/var/log/cloud-init-output.log"    "at %a, %d %b %Y %H:%M:%S %z." \
            "/var/log/messages"                 "%b %d %H:%M:%S" \
            "/var/log/teradici/user-data.log"   "%a %b %d %H:%M:%S %Z %Y"
    fi
}

check_required_vars() {
    set +x
    if [[ -z "$LLS_ADMIN_PASSWORD" ]]; then
        log "--> ERROR: Missing LLS Administrator Password."
        missing_vars="true"
    fi

    if [[ -z "$LLS_ACTIVATION_CODE" ]]; then
        log "--> ERROR: Missing LLS Activation Code."
        missing_vars="true"
    fi
    set -x

    if [[ "$missing_vars" == "true" ]]; then
        log "--> Exiting..."
        exit 1
    fi
}

install_pcoip_license_server() {
    curl -1sLf $LLS_REPO_SETUP_SCRIPT_URL | distro=el codename=8 bash
    retry 5 `# 10 retries` \
          10 `# 10s interval` \
          "dnf install -y java-11-openjdk tzdata-java pcoip-license-server" \
          "--> ERROR: Failed to install pcoip-license-server."
    set +x
    # PCoIP License Server takes approximately 30-60s to start. Need to wait for PCoIP License Server to
    # start before running any LLS commands.
    retry 10 `# 10 retries` \
        10 `# 10s interval` \
        "systemctl is-active flexnetls-TERADICI.service" \
        "--> ERROR: Flexnetls service is not active."

    retry 10 `# 10 retries` \
          10 `# 10s interval` \
          "pcoip-set-password -p 1P@ssw0rd! -n $LLS_ADMIN_PASSWORD" \
          "--> ERROR: Failed to set new password."
    set -x
}

# Send a message using ncat
send_msg_to() {
    local peer="$1"
    local msg="$2"

    retry 60 `# 60 retries` \
          10 `# 10s interval` \
          "echo $msg | nc --send-only $peer $NCAT_PORT" \
          "ERROR: Failed to send message to $peer."
}

# Wait for a message using ncat
get_msg_from() {
    local peer="$1"

    local msg=$(nc --recv-only --listen --allow $peer $NCAT_PORT)

    if [ $? != 0 ]
    then
        log "ERROR: Failed to receive message from $peer."
        exit 1
    fi

    echo $msg
}

setup_main_lls() {
    log "Setting up main PCoIP License Server..."

    # "Steps" here refer to official documentation:
    # https://www.teradici.com/web-help/pcoip_license_server/20.04/online/documentation/using-failover/#3-register-the-pcoip-license-servers

    # Step 2
    # Not needed since it is already started
    # systemctl start flexnetls-TERADICI

    local backup_server_id=$(get_msg_from $LLS_BACKUP_IP)

    cp $LLS_CONFIG_FILE $LLS_CONFIG_FILE.backup
    chmod 644 $LLS_CONFIG_FILE
    sed -i "s/#backup-hostid:/backup-hostid: $backup_server_id\/VM_UUID/" $LLS_CONFIG_FILE

    # Not needed since we'll be doing a restart
    # systemctl stop flexnetls-TERADICI

    # Step 3
    time systemctl restart flexnetls-TERADICI
    retry 10 `# 10 retries` \
        10 `# 10s interval` \
        "systemctl is-active flexnetls-TERADICI.service" \
        "--> ERROR: Flexnetls service is not active."

    set +x
    retry 10 `# 10 retries` \
        10 `#10s interval` \
        "pcoip-list-licenses -p $LLS_ADMIN_PASSWORD" \
        "--> ERROR: Failed to list license status"
    set -x

    # Not needed as the backup LLS will be restarted later
    #send_msg_to $LLS_BACKUP_IP START_LLS

    # Step 4 (No-op)

    # Step 5 (Optional)
    set +x
    $FLEXNETLSADMIN -server http://localhost:7070 -authorize admin $LLS_ADMIN_PASSWORD -config -set licensing.backup.uri=http://$LLS_BACKUP_IP:7070/fne/bin/capability

    $FLEXNETLSADMIN -server http://localhost:7070 -authorize admin $LLS_ADMIN_PASSWORD -config -set licensing.main.uri=http://$LLS_MAIN_IP:7070/fne/bin/capability
    set -x

    # Step 6
    local command=$(get_msg_from $LLS_BACKUP_IP)
    if [ ! $command == "ACTIVATE_LICENSES" ]
    then
        log "ERROR: unexpected command from Backup PCoIP License Server: $command"
        exit 1
    fi

    set +x
    pcoip-activate-online-license -a "$LLS_ACTIVATION_CODE" -c $LLS_LICENSE_COUNT -p "$LLS_ADMIN_PASSWORD"
    set -x

    # Signal Backup to restart to sync the new licenses
    send_msg_to $LLS_BACKUP_IP RESTART_LLS

    # Signal HAProxy to start
    send_msg_to $HAPROXY_MASTER_IP START_HAPROXY
    send_msg_to $HAPROXY_BACKUP_IP START_HAPROXY
}

setup_backup_lls() {
    log "Setting up backup PCoIP License Server..."
    # "Steps" here refer to official documentation:
    # https://www.teradici.com/web-help/pcoip_license_server/20.04/online/documentation/using-failover/#3-register-the-pcoip-license-servers

    # Step 2
    # Not needed since it is already started
    # systemctl start flexnetls-TERADICI

    set +x
    local server_id=$(pcoip-get-license-server-id -p "$LLS_ADMIN_PASSWORD")
    set -x
    # get the id part of result like "VM_UUID (i-0961ea1fe15e6b6ee)"
    server_id=$(echo $server_id | sed -r "s/VM_UUID \((.*)\)/\1/")

    send_msg_to $LLS_MAIN_IP $server_id

    # Not needed since we will restart service later after license activation
    # systemctl stop flexnetls-TERADICI

    # Step 3
    # Not needed since we will restart service later after license activation
    #local command=$(get_msg_from $LLS_MAIN_IP)
    #if [ ! $command == "START_LLS" ]
    #then
    #    log "ERROR: unexpected command from Main PCoIP License Server: $command"
    #    exit 1
    #fi

    #time systemctl restart flexnetls-TERADICI

    # Step 4
    set +x
    $FLEXNETLSADMIN -server http://localhost:7070 -authorize admin $LLS_ADMIN_PASSWORD -config -set fne.syncTo.mainUri=http://$LLS_MAIN_IP:7070/fne/bin/capability

    $FLEXNETLSADMIN -server http://localhost:7070 -authorize admin $LLS_ADMIN_PASSWORD -config -set fne.syncTo.enabled=true
    set -x

    # Step 5 (No-op)

    # Step 6
    send_msg_to $LLS_MAIN_IP "ACTIVATE_LICENSES"

    command=$(get_msg_from $LLS_MAIN_IP)
    if [ ! $command == "RESTART_LLS" ]
    then
        log "ERROR: unexpected command from Main PCoIP License Server: $command"
        exit 1
    fi

    time systemctl restart flexnetls-TERADICI
    retry 10 `# 10 retries` \
        10 `# 10s interval` \
        "systemctl is-active flexnetls-TERADICI.service" \
        "--> ERROR: Flexnetls service is not active."

}

setup_ssm() {
    yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
    systemctl enable amazon-ssm-agent
    systemctl start amazon-ssm-agent
}

set -x

if [[ -f "$LOG_FILE" ]]
then
    log "Provisioning script already run."
    exit 0
fi

mkdir -p "$(dirname $LOG_FILE)"
touch "$LOG_FILE"
chmod 600 "$LOG_FILE"

exec &>> $LOG_FILE

log "$(date) Running $0 as $(whoami)..."

cd $INSTALL_DIR

yum update -y
yum install -y nc

if [[ "$CLOUDWATCH_ENABLE" == "true" ]]
then
    setup_cloudwatch
fi

if [[ "${aws_ssm_enable}" == "true" ]]
then
    setup_ssm
fi

check_required_vars

install_pcoip_license_server

# Figure out if this instance is master or backup
MYIP=$(hostname -I)

if [ $MYIP == "$LLS_MAIN_IP" ]
then
    setup_main_lls
elif [ $MYIP == "$LLS_BACKUP_IP" ]
then
    setup_backup_lls
else
    log "ERROR: IP address of this instance $MYIP doesn't match Terraform configuration."
    exit 1
fi

set +x
$FLEXNETLSADMIN -server http://localhost:7070 -authorize admin $LLS_ADMIN_PASSWORD -status
set -x

log "$0 finished."
