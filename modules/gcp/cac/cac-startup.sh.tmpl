# Copyright (c) 2019 Teradici Corporation
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

#!/bin/bash

INSTALL_DIR="/root"
INSTALL_LOG="$INSTALL_DIR/cac-install.log"
cd $INSTALL_DIR

METADATA_BASE_URI="http://metadata.google.internal/computeMetadata/v1/instance"
METADATA_AUTH_URI="$METADATA_BASE_URI/service-accounts/default/token"
DECRYPT_URI="https://cloudkms.googleapis.com/v1/${kms_cryptokey_id}:decrypt"

log() {
    local message="$1"
    echo "[$(date)] $${message}" | tee -a "$INSTALL_LOG"
}

get_credentials() {
    if [[ -z "${kms_cryptokey_id}" ]]; then
        log "Not using encryption"

        PCOIP_REGISTRATION_CODE=${pcoip_registration_code}
        AD_SERVICE_ACCOUNT_PASSWORD=${ad_service_account_password}
        CAC_TOKEN=${cac_token}

    else
        log "Using encryption key ${kms_cryptokey_id}"

        apt-get -qq update
        apt install -y python

        # Gets access token attribute of response json object
        token=$(curl "$METADATA_AUTH_URI" -H "Metadata-Flavor: Google" | python -c "import sys, json; print json.load(sys.stdin)['access_token']")

        # Gets data using access token and decodes it
        data=$(echo "{ \"ciphertext\": \"${pcoip_registration_code}\" }")
        b64_data=$(curl -X POST -d "$data" "$DECRYPT_URI" -H "Authorization: Bearer $token" -H "Content-type: application/json" | python -c "import sys, json; print json.load(sys.stdin)['plaintext']")
        PCOIP_REGISTRATION_CODE=$(echo "$b64_data" | base64 --decode)

        data=$(echo "{ \"ciphertext\": \"${ad_service_account_password}\" }")
        b64_data=$(curl -X POST -d "$data" "$DECRYPT_URI" -H "Authorization: Bearer $token" -H "Content-type: application/json" | python -c "import sys, json; print json.load(sys.stdin)['plaintext']")
        AD_SERVICE_ACCOUNT_PASSWORD=$(echo "$b64_data" | base64 --decode)

        data=$(echo "{ \"ciphertext\": \"${cac_token}\" }")
        b64_data=$(curl -X POST -d "$data" "$DECRYPT_URI" -H "Authorization: Bearer $token" -H "Content-type: application/json" | python -c "import sys, json; print json.load(sys.stdin)['plaintext']")
        CAC_TOKEN=$(echo "$b64_data" | base64 --decode)
    fi

    # Exit if any of the required variables are missing
    if [[ -z "$PCOIP_REGISTRATION_CODE" || -z "$AD_SERVICE_ACCOUNT_PASSWORD" || -z "$CAC_TOKEN" ]]; then
        exit 1
    fi
}

if [[ -f "$INSTALL_DIR/cloud-access-connector" ]]; then
    log "Connector already installed. Skipping startup script."
    exit 0
fi

get_credentials

# Network tuning
PCOIP_NETWORK_CONF_FILE="/etc/sysctl.d/01-pcoip-cac-network.conf"

if [ ! -f $PCOIP_NETWORK_CONF_FILE ]; then
    # Note the indented HEREDOC lines must be preceded by tabs, not spaces
    cat <<- EOF > $PCOIP_NETWORK_CONF_FILE
	# System Control network settings for CAC
	net.core.rmem_max=160000000
	net.core.rmem_default=160000000
	net.core.wmem_max=160000000
	net.core.wmem_default=160000000
	net.ipv4.udp_mem=120000 240000 600000
	net.core.netdev_max_backlog=2000
	EOF

    sysctl -p $PCOIP_NETWORK_CONF_FILE
fi


# download CAC installer
curl -L ${cac_installer_url} -o $INSTALL_DIR/cloud-access-connector.tar.gz
tar xzvf $INSTALL_DIR/cloud-access-connector.tar.gz


# Wait for service account to be added
# do this last because it takes a while for new AD user to be added in a
# new Domain Controller
# Note: using the domain controller IP instead of the domain name for the
#       host is more resilient
echo '### Installing ldap-utils ###'
RETRIES=5
while true; do
    apt-get -qq update
    apt-get -qq install ldap-utils
    RC=$?
    if [ $RC -eq 0 ] || [ $RETRIES -eq 0 ]; then
        break
    fi

    echo "Error installing ldap-utils. $RETRIES retries remaining..."
    RETRIES=$((RETRIES-1))
    sleep 5
done

echo '### Ensure AD account is available ###'
TIMEOUT=1200
until ldapwhoami \
    -H ldap://${domain_controller_ip} \
    -D ${ad_service_account_username}@${domain_name} \
    -w $AD_SERVICE_ACCOUNT_PASSWORD \
    -o nettimeout=1; do
    if [ $TIMEOUT -le 0 ]; then
        break
    else
        echo "Waiting for AD account ${ad_service_account_username}@${domain_name} to become available. Retrying in 10 seconds... (Timeout in $TIMEOUT seconds)"
    fi
    TIMEOUT=$((TIMEOUT-10))
    sleep 10
done


echo '### Installing Cloud Access Connector ###'
export CAM_BASE_URI=${cam_url}

if [ -z "${ssl_key}" ]; then
    $INSTALL_DIR/cloud-access-connector install \
        -t $CAC_TOKEN \
        --accept-policies \
        --insecure \
        --sa-user ${ad_service_account_username} \
        --sa-password "$AD_SERVICE_ACCOUNT_PASSWORD" \
        --domain ${domain_name} \
        --domain-group "${domain_group}" \
        --reg-code $PCOIP_REGISTRATION_CODE \
        --sync-interval 5 \
        2>&1 | tee $INSTALL_LOG
else
    gsutil cp gs://${bucket_name}/${ssl_key} $INSTALL_DIR
    gsutil cp gs://${bucket_name}/${ssl_cert} $INSTALL_DIR

    $INSTALL_DIR/cloud-access-connector install \
        -t $CAC_TOKEN \
        --accept-policies \
        --ssl-key $INSTALL_DIR/${ssl_key} \
        --ssl-cert $INSTALL_DIR/${ssl_cert} \
        --sa-user ${ad_service_account_username} \
        --sa-password "$AD_SERVICE_ACCOUNT_PASSWORD" \
        --domain ${domain_name} \
        --domain-group "${domain_group}" \
        --reg-code $PCOIP_REGISTRATION_CODE \
        --sync-interval 5 \
        2>&1 | tee $INSTALL_LOG
fi

docker service ls