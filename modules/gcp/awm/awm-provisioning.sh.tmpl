# Copyright Teradici Corporation 2020-2021;  Â© Copyright 2022-2024 HP Development Company, L.P.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

#!/bin/bash

##### Template Variables #####
AWM_ADMIN_PASSWORD=${awm_admin_password}
AWM_DEPLOYMENT_SA_FILE=${awm_deployment_sa_file}
AWM_REPO_CHANNEL=${awm_repo_channel}
AWM_SETUP_SCRIPT=${awm_setup_script}
BUCKET_NAME=${bucket_name}
GCP_OPS_AGENT_ENABLE=${gcp_ops_agent_enable}
GCP_SA_FILE=${gcp_sa_file}
KMS_CRYPTOKEY_ID=${kms_cryptokey_id}
OPS_SETUP_SCRIPT=${ops_setup_script}
PCOIP_REGISTRATION_CODE=${pcoip_registration_code}
TERADICI_DOWNLOAD_TOKEN=${teradici_download_token}

LOG_FILE="/var/log/teradici/provisioning.log"

INSTALL_DIR="/root"
AWM_DEPLOYMENT_KEY_NAME="terraform-key"
AWM_DEPLOYMENT_NAME="terraform-deployment"
AWM_INSTALL_LOG="/var/log/teradici/awm-install.log"
AWM_REPO_SETUP_SCRIPT_URL="https://dl.anyware.hp.com/$TERADICI_DOWNLOAD_TOKEN/$AWM_REPO_CHANNEL/cfg/setup/bash.rpm.sh"
cd $INSTALL_DIR

METADATA_BASE_URI="http://metadata.google.internal/computeMetadata/v1/instance"
METADATA_AUTH_URI="$METADATA_BASE_URI/service-accounts/default/token"

log() {
    local message="$1"
    echo "[$(date)] $message"
}

retry() {
    local retry="$1"         # number of retries
    local retry_delay="$2"   # delay between each retry, in seconds
    local shell_command="$3" # the shell command to run
    local err_message="$4"   # the message to show when the shell command was not successful

    local retry_num=0
    until eval $shell_command
    do
        local rc=$?
        local retry_remain=$((retry-retry_num))

        if [ $retry_remain -eq 0 ]
        then
            log $error_message
            return $rc
        fi

        log "$err_message Retrying in $retry_delay seconds... ($retry_remain retries remaining...)"

        retry_num=$((retry_num+1))
        sleep $retry_delay
    done
}

setup_ops() {
    if [[ -f "/etc/google-cloud-ops-agent/config.yaml" ]]
    then
        log "--> Ops Agent configuration file already exists, skipping custom Ops Agent configuration to avoid overwriting existing settings"
    else
        log "--> Setting up GCP OPs Agent..."

        retry 25 `# 25 retries` \
              5  `# 5s interval` \
              "gsutil cp gs://$BUCKET_NAME/$OPS_SETUP_SCRIPT ." \
              "--> ERROR: Failed to download Logging Agent from gs://$BUCKET_NAME/$OPS_SETUP_SCRIPT."

        if [ $? -ne 0 ]; then
            log "--> ERROR: Failed to install GCP OPs Agent."
        fi 

        chmod +x $OPS_SETUP_SCRIPT

        . $OPS_SETUP_SCRIPT \
            $LOG_FILE \
            "/var/log/cloud-init-output.log" \
            "/var/log/messages" \
            "/var/log/teradici/awm-install.log"
    fi
}

install_prereqs() {
    log "--> Installing dos2unix, python3..."
    dnf update -y
    dnf install -y dos2unix python3

    if [ $? -ne 0 ]
    then
        log "--> ERROR: Failed to install prerequisites. Exiting provisioning script..."
        exit 1
    fi

    python3 -m pip install requests

    if [ $? -ne 0 ]
    then
        log "--> ERROR: Failed to install Python modules. Exiting provisioning script..."
        exit 1
    fi
}

get_credentials() {
    if [ "$GCP_SA_FILE" ]
    then
        retry 720 `# 720 retries` \
              10  `# 10s interval` \
              "gsutil cp gs://$BUCKET_NAME/$GCP_SA_FILE $INSTALL_DIR" \
              "--> ERROR: Failed to download GCP Service Account key from bucket $BUCKET_NAME."
    fi

    # Disable logging of secrets by wrapping the region with set +x and set -x
    set +x

    if [[ -z "$KMS_CRYPTOKEY_ID" ]]; then
        log "--> Script is not using encryption for secrets."

    else
        log "--> Script is using encryption key: $KMS_CRYPTOKEY_ID"

        # Gets key informations needed for decode from kms_cryptokey_id
        # kms_cryptokey_id: projects/<project-id>/locations/<location>/keyRings/<keyring-name>/cryptoKeys/<key-name>
        local kms_location="$(echo $KMS_CRYPTOKEY_ID | cut -d'/' -f4)"
        local kms_keyring="$(echo $KMS_CRYPTOKEY_ID | cut -d'/' -f6)"
        local kms_key="$(echo $KMS_CRYPTOKEY_ID | cut -d'/' -f8)"

        log "--> Decrypting Anyware Manager Administrator password..."
        AWM_ADMIN_PASSWORD=$(echo -n $AWM_ADMIN_PASSWORD | base64 --decode | gcloud kms decrypt --key "$kms_key" --keyring "$kms_keyring" --location "$kms_location" --ciphertext-file - --plaintext-file -)

        log "--> Decrypting PCoIP registration code..."
        PCOIP_REGISTRATION_CODE=$(echo -n $PCOIP_REGISTRATION_CODE | base64 --decode | gcloud kms decrypt --key "$kms_key" --keyring "$kms_keyring" --location "$kms_location" --ciphertext-file - --plaintext-file -)

        if [ "$GCP_SA_FILE" ]
        then
            log "--> Decrypting GCP Service Account key file..."
            cat $INSTALL_DIR/$GCP_SA_FILE | gcloud kms decrypt --key "$kms_key" --keyring "$kms_keyring" --location "$kms_location" --ciphertext-file - --plaintext-file $INSTALL_DIR/$GCP_SA_FILE
        fi
    fi
    set -x
}

check_required_vars() {
    set +x
    
    if [[ -z "$PCOIP_REGISTRATION_CODE" ]]
    then
        log "--> ERROR: Missing PCoIP Registration Code."
        missing_vars="true"
    fi

    if [[ -z "$AWM_ADMIN_PASSWORD" ]]
    then
        log "--> ERROR: Missing Anyware Manager Administrator Password."
        missing_vars="true"
    fi
    set -x

    if [[ "$missing_vars" = "true" ]]
    then
        log "--> Exiting..."
        exit 1
    fi
}

configure_firewall(){
    systemctl enable firewalld
    systemctl start firewalld

    firewall-cmd --permanent --add-port=6443/tcp # virtual network flannel
    firewall-cmd --permanent --zone=trusted --add-source=10.42.0.0/16 # This subnet is for the pods
    firewall-cmd --permanent --zone=trusted --add-source=10.43.0.0/16 # This subnet is for the services
    firewall-cmd --reload
}

add_awm_repo() {
    log "--> Adding Anyware Manager repo..."
    curl -1sLf $AWM_REPO_SETUP_SCRIPT_URL | distro=el codename=8 bash
    dnf repolist --enabled teradici-anyware-manager*
}

config_selinux() {
    log "--> Configuring SE Linux..."
    dnf install -y selinux-policy-base container-selinux
    dnf install -y https://github.com/k3s-io/k3s-selinux/releases/download/v1.1.stable.1/k3s-selinux-1.1-1.el8.noarch.rpm
    dnf install -y anyware-manager-selinux
}

install_awm() {
    # https://www.teradici.com/web-help/anyware_manager/23.04/cam_standalone_installation/default_config/#3-install-anyware-manager
    log "--> Installing Anyware Manager..."

    # Run the following command to install Anyware Manager RPM
    dnf install -y anyware-manager 2>&1 | tee -a $AWM_INSTALL_LOG

    # Run the following command to install Anyware Manager with the appropriate flags
    /usr/local/bin/anyware-manager install --manager-admin-password $AWM_ADMIN_PASSWORD --accept-policies --self-signed --debug 2>&1 | tee -a $AWM_INSTALL_LOG

    if [ $? -ne 0 ]
    then
        log "--> ERROR: Failed to install Anyware Manager..."
        exit 1
    fi
}

awm_setup() {
    local optional_args=""

    log "--> Running Anyware Manager setup script..."

    retry 720 `# 720 retries` \
          10  `# 10s interval` \
          "gsutil cp gs://$BUCKET_NAME/$AWM_SETUP_SCRIPT $INSTALL_DIR" \
          "--> ERROR: Failed to download Anyware Manager setup script from gs://$BUCKET_NAME/$AWM_SETUP_SCRIPT."

    dos2unix $INSTALL_DIR/$AWM_SETUP_SCRIPT
    chmod +x $INSTALL_DIR/$AWM_SETUP_SCRIPT

    if [ "$GCP_SA_FILE" ]
    then
        dos2unix $INSTALL_DIR/$GCP_SA_FILE
        optional_args=$optional_args"--gcp_key $INSTALL_DIR/$GCP_SA_FILE "
    fi

    log "--> Running Anyware Manager setup script with the following options:"
    log "  --deployment_name $AWM_DEPLOYMENT_NAME"
    log "  --key_file $INSTALL_DIR/$AWM_DEPLOYMENT_SA_FILE"
    log "  --key_name $AWM_DEPLOYMENT_KEY_NAME"
    log "  --password <Anyware Manager Administrator Password>"
    log "  --reg_code <PCoIP Registration Code>"
    log "  $optional_args"

    set +x
    PYTHONWARNINGS="ignore:Unverified HTTPS request" \
      $INSTALL_DIR/$AWM_SETUP_SCRIPT \
      --deployment_name $AWM_DEPLOYMENT_NAME \
      --key_file $INSTALL_DIR/$AWM_DEPLOYMENT_SA_FILE \
      --key_name $AWM_DEPLOYMENT_KEY_NAME \
      --password $AWM_ADMIN_PASSWORD \
      --reg_code $PCOIP_REGISTRATION_CODE \
      $optional_args
    set -x

    if [ $? -ne 0 ]
    then
        log "--> ERROR: Failed to run Anyware Manager setup script. Exiting provisioning script..."
        exit 1
    fi

    if [ ! -f "$INSTALL_DIR/$AWM_DEPLOYMENT_SA_FILE" ]
    then
        log "--> ERROR: Anyware Manager Deployment service account key not created. Exiting provisioning script..."
        exit 1
    fi
}

upload_dsa_key() {
    if [[ "$KMS_CRYPTOKEY_ID" ]]
    then
        log "--> Encrypting Deployment Service Account key with $KMS_CRYPTOKEY_ID"

        local kms_location="$(echo $KMS_CRYPTOKEY_ID | cut -d'/' -f4)"
        local kms_keyring="$(echo $KMS_CRYPTOKEY_ID | cut -d'/' -f6)"
        local kms_key="$(echo $KMS_CRYPTOKEY_ID | cut -d'/' -f8)"

        cat $INSTALL_DIR/$AWM_DEPLOYMENT_SA_FILE | gcloud kms encrypt --key "$kms_key" --keyring "$kms_keyring" --location "$kms_location" --plaintext-file - --ciphertext-file $INSTALL_DIR/$AWM_DEPLOYMENT_SA_FILE
    fi

    log "--> Uploading Deployment Service Account Key to bucket $BUCKET_NAME..."

    retry 5 `# 5 retries`\
          5 `# 5s interval` \
          "gsutil cp $INSTALL_DIR/$AWM_DEPLOYMENT_SA_FILE gs://$BUCKET_NAME/" \
          "--> ERROR: Failed to upload Deployment Service Account Key to bucket $BUCKET_NAME"

    if [ $? -ne 0 ]
    then
        log "--> Exiting provisioning script due to an error."
        exit 1
    fi
}


if [[ ! -f "$LOG_FILE" ]]
then
    mkdir -p "$(dirname $LOG_FILE)"
    touch "$LOG_FILE"
    chmod +644 "$LOG_FILE"
fi

log "$(date)"

# Print all executed commands to the terminal
set -x

# Redirect stdout and stderr to the log file
exec &>>$LOG_FILE

if [[ "$GCP_OPS_AGENT_ENABLE" == "true" ]]
then
    setup_ops
fi

install_prereqs
get_credentials
check_required_vars
configure_firewall
add_awm_repo
config_selinux
install_awm
awm_setup
upload_dsa_key

log "--> Provisioning script completed successfully."
