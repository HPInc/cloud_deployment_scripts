# Â© Copyright 2022-2024 HP Development Company, L.P.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

#!/bin/bash

##### Template Variables #####
AD_SERVICE_ACCOUNT_USERNAME=${ad_service_account_username}
AD_SERVICE_ACCOUNT_PASSWORD_ID=${ad_service_account_password_id}
AWC_EXTRA_INSTALL_FLAGS=${awc_extra_install_flags}
AWM_DEPLOYMENT_SA_FILE=${awm_deployment_sa_file}
AWM_DEPLOYMENT_SA_FILE_ID=${awm_deployment_sa_file_id}
AWM_SCRIPT=${awm_script}
BUCKET_NAME=${bucket_name}
COMPUTERS_DN=${computers_dn}
DOMAIN_CONTROLLER_IP=${domain_controller_ip}
DOMAIN_NAME=${domain_name}
EXTERNAL_PCOIP_IP=${external_pcoip_ip}
GCP_OPS_AGENT_ENABLE=${gcp_ops_agent_enable}
LDAPS_CERT_FILENAME=${ldaps_cert_filename}
MANAGER_INSECURE=${awc_flag_manager_insecure}
MANAGER_URL=${manager_url}
OPS_SETUP_SCRIPT=${ops_setup_script}
TLS_CERT=${tls_cert}
TLS_KEY=${tls_key}
TERADICI_DOWNLOAD_TOKEN=${teradici_download_token}
USERS_DN=${users_dn}

AWC_BIN_PATH="/usr/local/bin/anyware-connector"
AWC_REPO_SETUP_SCRIPT_URL="https://dl.anyware.hp.com/$TERADICI_DOWNLOAD_TOKEN/anyware-manager/cfg/setup/bash.rpm.sh"
AWC_INSTALL_LOG="/var/log/teradici/awc-install.log"
AWC_TOKEN_FILE=$PROVISIONING_DIR/connector_token
LOG_FILE="/var/log/teradici/provisioning.log"
PROVISIONING_DIR="/root"

log() {
    local message="$1"
    echo "[$(date)] $message"
}

retry() {
    local retry="$1"         # number of retries
    local retry_delay="$2"   # delay between each retry, in seconds
    local shell_command="$3" # the shell command to run
    local err_message="$4"   # the message to show when the shell command was not successful

    local retry_num=0
    until eval $shell_command
    do
        local rc=$?
        local retry_remain=$((retry-retry_num))

        if [ $retry_remain -eq 0 ]
        then
            log $error_message
            return $rc
        fi

        log "$err_message Retrying in $retry_delay seconds... ($retry_remain retries remaining...)"

        retry_num=$((retry_num+1))
        sleep $retry_delay
    done
}

install_prereqs() {
    log "--> Installing dos2unix, python3, firewalld..."
    dnf update -y
    dnf install -y dos2unix python3 firewalld

    if [ $? -ne 0 ]
    then
        log "--> ERROR: Failed to install prerequisites. Exiting provisioning script..."
        exit 1
    fi

    # install requirement for get-connector-token
    pip3 install requests

    if [ $? -ne 0 ]
    then
        log "--> ERROR: Failed to install prerequisites. Exiting provisioning script..."
        exit 1
    fi
}

setup_ops() {
    if [[ -f "/etc/google-cloud-ops-agent/config.yaml" ]]
    then
        log "--> Ops Agent configuration file already exists, skipping custom Ops Agent configuration to avoid overwriting existing settings"
    else
        log "--> Setting up GCP OPs Agent..."

        retry 25 `# 25 retries` \
              5  `# 5s interval` \
              "gsutil cp gs://$BUCKET_NAME/$OPS_SETUP_SCRIPT ." \
              "--> ERROR: Failed to download Logging Agent from gs://$BUCKET_NAME/$OPS_SETUP_SCRIPT."

        if [ $? -ne 0 ]; then
            log "--> ERROR: Failed to install GCP OPs Agent."
        fi

        chmod +x $OPS_SETUP_SCRIPT

        . $OPS_SETUP_SCRIPT \
            $LOG_FILE \
            "/var/log/cloud-init-output.log" \
            "/var/log/messages" \
            "$AWC_INSTALL_LOG"
    fi
}

get_credentials() {
    set +x
    retry 120 `# 120 retries`\
          60 `# 60s interval` \
          "AD_SERVICE_ACCOUNT_PASSWORD=\$(gcloud secrets versions access latest --secret=$AD_SERVICE_ACCOUNT_PASSWORD_ID --format=\"get(payload.data)\" | base64 -d)" \
          "--> ERROR: Failed to download AD Service Account Password from Secret Manager"

    # In some cases, the Anyware Manager Deployment Service Account key is
    # generated by a new Anyware Manager VM that is being created in parallel as the
    # AWC. Loop until the file is found in the Secret Manager.
    retry 120 `# 120 retries`\
          60 `# 60s interval` \
          "dep_sa_file_encoded_value=\$(gcloud secrets versions access latest --secret=$AWM_DEPLOYMENT_SA_FILE_ID" \
          "--> ERROR: Failed to download AWM Deployment Service Account Key from Secret Manager"
    
    if [ "$dep_sa_file_encoded_value" != "" ]; then
        dep_sa_file_decoded_value=$(echo "$dep_sa_file_encoded_value" | base64 -d)
        echo "$dep_sa_file_decoded_value" > "$PROVISIONING_DIR/$AWM_DEPLOYMENT_SA_FILE"
    else
        log "--> ERROR: Failed to retrieve AWM Anyware Manager deployment Service Account key. Exiting provisioning script..."
        exit 1
    fi
    set -x
}

get_connector_token() {
    log "--> Retrieving connector token before AWC install..."

    local args=""

    log "--> Downloading Anyware Manager python script from the bucket..."
    retry 3 `# 3 retries` \
          5 `# 5s interval` \
          "gsutil cp gs://$BUCKET_NAME/$AWM_SCRIPT $PROVISIONING_DIR" \
          "--> ERROR: Failed to download Anyware Manager python script from gs://$BUCKET_NAME/$AWM_SCRIPT"
    chmod +x $PROVISIONING_DIR/$AWM_SCRIPT

    # Ensure line endings are in Unix format
    dos2unix $PROVISIONING_DIR/$AWM_SCRIPT
    dos2unix $PROVISIONING_DIR/$AWM_DEPLOYMENT_SA_FILE

    # Set AWC_TOKEN variable using the script's output
    if [ "$MANAGER_INSECURE" ]
    then
        args="--insecure"
    fi

    PYTHONWARNINGS="ignore:Unverified HTTPS request" $PROVISIONING_DIR/$AWM_SCRIPT $PROVISIONING_DIR/$AWM_DEPLOYMENT_SA_FILE --url $MANAGER_URL --out $AWC_TOKEN_FILE $args
    set +x
    AWC_TOKEN=`cat $AWC_TOKEN_FILE`
    set -x
    rm $AWC_TOKEN_FILE

    # Check and exit provisioning script if retrieving connector token failed
    if [ $? -ne 0 ]; then
        log "--> ERROR: Failed to retrieve connector token using Anyware Manager script. Exiting provisioning script..."
        exit 1
    fi
}

check_required_vars() {
    set +x
    if [[ -z "$AD_SERVICE_ACCOUNT_PASSWORD" ]]; then
        log "--> ERROR: Missing Active Directory Service Account Password."
        missing_vars="true"
    fi

    if [[ -z "$AWC_TOKEN" ]]; then
        log "--> ERROR: Missing Anyware Connector Token."
        missing_vars="true"
    fi

    if [[ ! -s $PROVISIONING_DIR/$AWM_DEPLOYMENT_SA_FILE ]]; then 
        log "--> ERROR: Missing AWM Deployment Service Account Key from Secret Manager."
        missing_vars="true"
    fi
    set -x

    if [[ "$missing_vars" == "true" ]]; then
        log "--> Exiting..."
        exit 1
    fi
}

configure_firewall(){
    systemctl enable firewalld
    systemctl start firewalld

    firewall-cmd --permanent --add-port=6443/tcp # virtual network flannel
    firewall-cmd --permanent --add-port=4172/tcp # PCoIP SG port
    firewall-cmd --permanent --add-port=4172/udp # PCoIP SG port
    firewall-cmd --permanent --zone=trusted --add-source=10.42.0.0/16 # This subnet is for the pods
    firewall-cmd --permanent --zone=trusted --add-source=10.43.0.0/16 # This subnet is for the services
    firewall-cmd --reload
}

check_connector_installed() {
    if [[ -f "$AWC_BIN_PATH" ]]; then
        log "--> Connector already installed. Skipping provisioning script..."
        exit 0
    fi
}

add_awm_repo() {
    log "--> Adding Anyware Manager repo..."
    curl -1sLf $AWC_REPO_SETUP_SCRIPT_URL | distro=el codename=8 bash
    dnf repolist --enabled teradici-anyware-manager*
}

config_selinux() {
    log "--> Configuring SE Linux..."
    dnf install -y selinux-policy-base container-selinux
    dnf install -y https://github.com/k3s-io/k3s-selinux/releases/download/v1.1.stable.1/k3s-selinux-1.1-1.el8.noarch.rpm
    dnf install -y anyware-manager-selinux
}

install_awc() {
    log "--> Installing Anyware Connector..."
    dnf install -y anyware-connector 2>&1 | tee -a $AWC_INSTALL_LOG

    if [ $? -ne 0 ]
    then
        log "--> ERROR: Failed to install Anyware Connector..."
        exit 1
    fi
}

wait_for_dc() {
    # Wait for service account to be added. Do this last because it takes
    # a while for new AD user to be added in a new Domain Controller.
    # Note: using the domain controller IP instead of the domain name for
    #       the host is more resilient.

    log "--> Installing utility packages..."
    retry 5 `# 5 retries` \
          5 `# 5s interval` \
          "dnf -y install bind-utils nc openldap-clients" \
          "--> ERROR: Failed to install utility packages."

    set +x
    log "--> Ensure AD account is available..."
    retry 120 `# 120 retries` \
          10  `# 10s interval` \
          "ldapwhoami \
            -H ldap://$DOMAIN_CONTROLLER_IP \
            -D $AD_SERVICE_ACCOUNT_USERNAME@$DOMAIN_NAME \
            -w $AD_SERVICE_ACCOUNT_PASSWORD \
            -o nettimeout=1" \
          "--> ERROR: AD account $AD_SERVICE_ACCOUNT_USERNAME@$DOMAIN_NAME is not available."
    set -x
    # Check that the domain name can be resolved and that the LDAP port is accepting
    # connections. This could have been all done with the ldapwhoami command, but
    # due to a number of occasional awc-installation issues, such as "domain
    # controller unreachable" or "DNS error occurred" errors, check these explicitly
    # for logging and debug purposes.
    log "--> Ensure domain $DOMAIN_NAME can be resolved..."
    retry 120 `# 120 retries` \
          10  `# 10s interval` \
          "host $DOMAIN_NAME" \
          "--> ERROR: Failed to resolve $DOMAIN_NAME."

    log "--> Ensure domain $DOMAIN_NAME port 636 is reachable..."
    retry 240 `# 240 retries` \
          10  `# 10s interval` \
          "nc -vz $DOMAIN_NAME 636" \
          "--> ERROR: Failed to contact $DOMAIN_NAME:636."
}

download_ldaps_cert() {
    log "--> Downloading LDAPS Cert..."
    retry 120 `# 120 retries` \
          10  `# 10s interval` \
          "gsutil cp gs://$BUCKET_NAME/$LDAPS_CERT_FILENAME $PROVISIONING_DIR" \
          "--> ERROR: Falied to download Domain Controller LDAPS certificate from GCS bucket."
}

configure_awc() {
    log "--> Configuring Anyware Connector..."
    local args=""

    log "--> Running command: $AWC_BIN_PATH install"
    log "--> AWC install options:"
    log "  --token <awc_token>"
    log "  --computers-dn $COMPUTERS_DN"
    log "  --users-dn $USERS_DN"
    log "  --accept-policies"
    log "  --sa-user <ad_service_account_username>"
    log "  --sa-password <ad_service_account_password>"
    log "  --domain $DOMAIN_NAME"
    log "  --ldaps-ca-cert $PROVISIONING_DIR/$LDAPS_CERT_FILENAME"
    log "  --retrieve-agent-state true"
    log "  --show-agent-state true"
    log "  --sync-interval 5"
    log "  --manager-url $MANAGER_URL"
    log "  $AWC_EXTRA_INSTALL_FLAGS"

    # Set pipefail option to return status of the connector install command
    set -o pipefail

    if [ "$TLS_KEY" ]
    then
        log "  --tls-key <tls_key>"
        log "  --tls-cert <tls_cert>"
        retry 3 `# 3 retries` \
              5 `# 5s interval` \
              "gsutil cp gs://$BUCKET_NAME/$TLS_KEY $PROVISIONING_DIR" \
              "--> ERROR: Failed to download TLS key from $BUCKET_NAME"
        retry 3 `# 3 retries` \
              5 `# 5s interval` \
              "gsutil cp gs://$BUCKET_NAME/$TLS_CERT $PROVISIONING_DIR" \
              "--> ERROR: Failed to download TLS cert from $BUCKET_NAME"

        args=$args"--tls-key $PROVISIONING_DIR/$TLS_KEY "
        args=$args"--tls-cert $PROVISIONING_DIR/$TLS_CERT "
    else
        log "  --self-signed"
        args=$args"--self-signed "
    fi

    if [ "$MANAGER_INSECURE" ]
    then
        log "  --manager-insecure"
        args=$args"--manager-insecure "
    fi

    if [ "$EXTERNAL_PCOIP_IP" ]
    then
        log "  --external-pcoip-ip $EXTERNAL_PCOIP_IP"
        args=$args"--external-pcoip-ip $EXTERNAL_PCOIP_IP "
    fi

    set +x

    retry 10 `# 10 retries` \
          10 `# 10s interval` \
          "$AWC_BIN_PATH configure \
            --token $AWC_TOKEN \
            --accept-policies \
            --computers-dn $COMPUTERS_DN \
            --users-dn $USERS_DN \
            --sa-user $AD_SERVICE_ACCOUNT_USERNAME \
            --sa-password "$AD_SERVICE_ACCOUNT_PASSWORD" \
            --domain $DOMAIN_NAME \
            --ldaps-ca-cert $PROVISIONING_DIR/$LDAPS_CERT_FILENAME \
            --retrieve-agent-state true \
            --show-agent-state true \
            --sync-interval 5 \
            --manager-url $MANAGER_URL \
            $AWC_EXTRA_INSTALL_FLAGS \
            $args \
            2>&1 | tee -a $AWC_INSTALL_LOG" \
          "--> ERROR: Failed to install Anyware Connector."

    if [ $? -ne 0 ]
    then
        log "--> Exiting provisioning script due to an error."
        exit 1
    fi

    log "--> Successfully configured Anyware Connector."

    set -x
}

cleanup() {
    rm $PROVISIONING_DIR/$LDAPS_CERT_FILENAME
}

if [[ ! -f "$LOG_FILE" ]]
then
    mkdir -p "$(dirname $LOG_FILE)"
    touch "$LOG_FILE"
    chmod +644 "$LOG_FILE"
fi

# Print all executed commands to the terminal
set -x

# Redirect stdout and stderr to the log file
exec &>>$LOG_FILE

log "$(date) Running $0 as $(whoami)..."

cd $PROVISIONING_DIR

install_prereqs

if [[ "$GCP_OPS_AGENT_ENABLE" == "true" ]]
then
    setup_ops
fi

get_credentials

configure_firewall

check_connector_installed

add_awm_repo

config_selinux

install_awc

wait_for_dc

download_ldaps_cert

get_connector_token

check_required_vars

configure_awc

cleanup

log "--> Provisioning script completed successfully."
