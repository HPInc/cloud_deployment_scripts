# Copyright (c) 2019 Teradici Corporation
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

#!/bin/bash

INST_LOG_FILE="/var/log/teradici/agent/install.log"

METADATA_BASE_URI="http://metadata.google.internal/computeMetadata/v1/instance"
METADATA_AUTH_URI="$METADATA_BASE_URI/service-accounts/default/token"
DECRYPT_URI="https://cloudkms.googleapis.com/v1/${kms_cryptokey_id}:decrypt"
PCOIP_AGENT_REPO_PUBKEY_URL=${pcoip_agent_repo_pubkey_url}
PCOIP_AGENT_REPO_URL=${pcoip_agent_repo_url}

log() {
    local message="$1"
    echo "[$(date)] $${message}" | tee -a "$INST_LOG_FILE"
}

get_credentials() {
    if [[ -z "${kms_cryptokey_id}" ]]; then
        log "Not using encryption"

        PCOIP_REGISTRATION_CODE=${pcoip_registration_code}
        AD_SERVICE_ACCOUNT_PASSWORD=${ad_service_account_password}

    else
        log "Using encryption key ${kms_cryptokey_id}"

        # Gets access token attribute of response json object
        token=$(curl "$METADATA_AUTH_URI" -H "Metadata-Flavor: Google" | python -c "import sys, json; print json.load(sys.stdin)['access_token']")

        # Gets data using access token and decodes it
        data=$(echo "{ \"ciphertext\": \"${pcoip_registration_code}\" }")
        b64_data=$(curl -X POST -d "$data" "$DECRYPT_URI" -H "Authorization: Bearer $token" -H "Content-type: application/json" | python -c "import sys, json; print json.load(sys.stdin)['plaintext']")
        PCOIP_REGISTRATION_CODE=$(echo "$b64_data" | base64 --decode)

        data=$(echo "{ \"ciphertext\": \"${ad_service_account_password}\" }")
        b64_data=$(curl -X POST -d "$data" "$DECRYPT_URI" -H "Authorization: Bearer $token" -H "Content-type: application/json" | python -c "import sys, json; print json.load(sys.stdin)['plaintext']")
        AD_SERVICE_ACCOUNT_PASSWORD=$(echo "$b64_data" | base64 --decode)
    fi

    # Exit if any of the required variables are missing
    if [[ -z "$PCOIP_REGISTRATION_CODE" || -z "$AD_SERVICE_ACCOUNT_PASSWORD" ]]; then
        exit 1
    fi
}

exit_and_restart()
{
    log "--> Rebooting"
    (sleep 1; reboot -p) &
    exit
}

install_pcoip_agent() {
    if ! (rpm -q pcoip-agent-standard)
    then
        log "--> Start to install pcoip agent ..."
        # Get the Teradici pubkey
        log "--> Get Teradici pubkey"
        rpm --import $PCOIP_AGENT_REPO_PUBKEY_URL

        # Get pcoip repo
        log "--> Get Teradici pcoip agent repo"
        wget --retry-connrefused --tries=3 --waitretry=5 -P /etc/yum.repos.d $PCOIP_AGENT_REPO_URL

        log "--> Install PCoIP standard agent ..."
        yum -y install pcoip-agent-standard
        if [ $? -ne 0 ]; then
            log "--> Failed to install PCoIP agent."
            exit 1
        fi
        log "--> PCoIP agent installed successfully."

        log "--> Register pcoip agent license ..."
        n=0
        while true; do
            /usr/sbin/pcoip-register-host --registration-code="$PCOIP_REGISTRATION_CODE" && break
            n=$[$n+1]

            if [ $n -ge 10 ]; then
                log "--> Failed to register PCoIP agent after $n tries."
                exit 1
            fi

            log "--> Failed to register PCoIP agent. Retrying in 10s..."
            sleep 10
        done
        log "--> Pcoip agent is registered successfully"
    fi
}

# Join domain
join_domain()
{
    local dns_record_file="dns_record"
    if [[ ! -f "$dns_record_file" ]]
    then
        log "--> DOMAIN NAME: ${domain_name}"
        log "--> USERNAME: ${ad_service_account_username}"
        log "--> DOMAIN CONTROLLER: ${domain_controller_ip}"

        VM_NAME=$(hostname)

        # Wait for AD service account to be set up
        yum -y install openldap-clients
        log "--> Wait for AD account ${ad_service_account_username}@${domain_name} to be available"
        until ldapwhoami -H ldap://${domain_controller_ip} -D ${ad_service_account_username}@${domain_name} -w "$AD_SERVICE_ACCOUNT_PASSWORD" -o nettimeout=1 > /dev/null 2>&1
        do
            log "${ad_service_account_username}@${domain_name} not available yet, retrying in 10 seconds..."
            sleep 10
        done

        # Join domain
        log "--> Install required packages to join domain"
        yum -y install sssd realmd oddjob oddjob-mkhomedir adcli samba-common samba-common-tools krb5-workstation openldap-clients policycoreutils-python

        log "--> Restarting messagebus service"
        if ! (systemctl restart messagebus)
        then
            log "--> Failed to restart messagebus service"
            return 106
        fi

        log "--> Enable and start sssd service"
        if ! (systemctl enable sssd --now)
        then
            log "Failed to start sssd service"
            return 106
        fi

        log "--> Joining the domain"
        if [[ -n "$OU" ]]
        then
            echo "$AD_SERVICE_ACCOUNT_PASSWORD" | realm join --user="${ad_service_account_username}" --computer-ou="$OU" "${domain_name}" >&2
        else
            echo "$AD_SERVICE_ACCOUNT_PASSWORD" | realm join --user="${ad_service_account_username}" "${domain_name}" >&2
        fi
        exitCode=$?
        if [[ $exitCode -eq 0 ]]
        then
            log "--> Joined Domain '${domain_name}' and OU '$OU'"
        else
            log "--> Failed to join Domain '${domain_name}' and OU '$OU'"
            return 106
        fi

        log "--> Configuring settings"
        sed -i '$ a\dyndns_update = True\ndyndns_ttl = 3600\ndyndns_refresh_interval = 43200\ndyndns_update_ptr = True\nldap_user_principal = nosuchattribute' /etc/sssd/sssd.conf
        sed -c -i "s/\\(use_fully_qualified_names *= *\\).*/\\1False/" /etc/sssd/sssd.conf
        sed -c -i "s/\\(fallback_homedir *= *\\).*/\\1\\/home\\/%u/" /etc/sssd/sssd.conf
        domainname "$VM_NAME.${domain_name}"
        echo "%${domain_name}\\\\Domain\\ Admins ALL=(ALL) ALL" > /etc/sudoers.d/sudoers

        log "--> Registering with DNS"
        DOMAIN_UPPER=$(echo "${domain_name}" | tr '[:lower:]' '[:upper:]')
        IP_ADDRESS=$(hostname -I | grep -Eo '10.([0-9]*\.){2}[0-9]*')
        echo "$AD_SERVICE_ACCOUNT_PASSWORD" | kinit "${ad_service_account_username}"@"$DOMAIN_UPPER"
        touch "$dns_record_file"
        echo "server ${domain_controller_ip}" > "$dns_record_file"
        echo "update add $VM_NAME.${domain_name} 600 a $IP_ADDRESS" >> "$dns_record_file"
        echo "send" >> "$dns_record_file"
        nsupdate -g "$dns_record_file"
    fi
}

# ------------------------------------------------------------
# start from here
# ------------------------------------------------------------

if (rpm -q pcoip-agent-standard); then
    exit
fi

if [[ ! -f "$INST_LOG_FILE" ]]
then
    mkdir -p "$(dirname $${INST_LOG_FILE})"
    touch "$INST_LOG_FILE"
    chmod +644 "$INST_LOG_FILE"
fi

log "$(date)"

get_credentials

yum -y update

yum install -y wget

# Install GNOME and set it as the desktop
log "--> Install Linux GUI ..."
yum -y groupinstall "GNOME Desktop" "Graphical Administration Tools"
# yum -y groupinstall "Server with GUI"

log "--> Set default to graphical target"
systemctl set-default graphical.target

join_domain

install_pcoip_agent

log "--> Installation is completed !!!"

exit_and_restart
